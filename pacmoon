#!/usr/bin/env zsh

emulate zsh
setopt warnCreateGlobal extendedGlob noFunctionArgZero

PACMOON_VERSION=0.1
AUR_BASE=http://aur.archlinux.org/packages
ABS_RSYNC=rsync.archlinux.org::abs

autoload jgetopt colors
colors

configBase="$XDG_CONFIG_HOME/pacmoon"

list_uncompiled() {
}

warn() {
    echo " $fg_bold[yellow]*$fg_no_bold[default] $*"
}

die() {
    echo " $fg_bold[red]*$fg_no_bold[default] $*"
    exit 1
}

verbose() {
    if [[ $+verbose = 1 ]] ; then
        echo " $fg_bold[cyan]*$fg_no_bold[default] $*"
    fi
}

pushd_new() {
    [[ -z $keep_tmp ]] && rm -rf $1
    mkdir -p $1
    pushd $1
}

pacman_output_field() {
    pacman 2>/dev/null ${(s: :)1} | grep "^$2" | sed 's/.*: //'
}

compile_and_install() {
    local name=$1
    local repo=$2

    if [[ $repo = local ]] ; then
        verbose "installing $name from AUR"
    else
        verbose "installing $name from $repo"
        local arch=$(package-query -Sif %a $repo/$name)
        rsync -aP "$ABS_RSYNC/$arch/$repo/$name/" .
        makepkg -i --noconfirm || die "could not build $name from $repo"
        mkdir -p $configBase/pkg || die "could not mkdir $configBase/pkg"

        # record the date the package was installed
        package-query -Qif %1 $name > $configBase/pkg/$name
    fi
}

build_pkg() {
    local name=$1
    local pkgData="$(package-query -Qif %1,%s $name)"
    [[ -z $pkgData ]] && die "could not find package $name"

    if [ -f $configBase/pkg/$name ] ; then
        local installedDate=${pkgData%,*}
    else
        verbose "package $name has never been compiled"
        pushd_new "$configBase/tmp/$name"
        compile_and_install $name ${pkgData#*,}
        popd
    fi
}

build_pkgs() {
    for pkg in $* ; do build_pkg $pkg ; done
}

build_all() {
    local logPath=$(pacman_output_field -v Log)

    if [[ -f "$configBase/last_update" ]] ; then
    else
        warn "last update time not found, checking all files manually"

        for pkg in $(pacman -Qq) ; do
            build_pkg $pkg
        done
    fi
}

main() {
    jgetopt $0 "$PACMOON_VERSION (please enjoy your evening)" \
        verbose,v      "increase verbosity" \
        keep-going,k   "do not stop on error" \
        pretend,p      "only print what would be done" \
        uncompiled,u   "list packages which have not been custom compiled" \
        temp,T         "keep temporary files" \
        -- $*

    if [[ $+uncompiled = 1 ]] ; then
        list_uncompiled
    elif [[ $#positionals > 0 ]] ; then
        build_pkgs $positionals
    else
        build_all
    fi
}

main $*
