#!/usr/bin/env zsh

emulate zsh
setopt warnCreateGlobal extendedGlob noFunctionArgZero nullGlob

PACMOON_VERSION=0.8.1
AUR_BASE=http://aur.archlinux.org/packages
ABS_DIR=/var/abs
ABS_RSYNC=rsync.archlinux.org::abs
RSYNC_ARGS=(-mrtv --no-motd --no-p --no-o --no-g)

autoload jgetopt colors
colors

pmoonHome="${XDG_CONFIG_HOME:-$HOME/.config}/pacmoon"
logFile="$pmoonHome/log"
mkdir -p $pmoonHome/pkg || die "could not mkdir $pmoonHome/pkg"

typeset -A dep_status

c_ver=$fg[green]
c_reset=$fg_no_bold[default]

info() {
    echo " $fg[green]*$c_reset $*"
}

print_pkg() {
    info $1 "[$c_ver$2$c_reset]"
}

print_inst_pkg() {
    echo -n " $fg[green]*$c_reset" $1 "[$c_ver$2$c_reset]"

    # TODO: handle split packages differently
    if [[ $+split_pkgs[$1] -eq 1 ]] ; then
        echo " ($split_pkgs[$pkg])"
    elif is_dep $pkg ; then
        echo " (dependency)"
    else
        echo ""
    fi
}

log_info() {
    info $*
    echo info: $* >> $logFile
}

warn() {
    echo " $fg_bold[yellow]*$c_reset $*"
    echo warn: $* >> $logFile
}

die() {
    echo " $fg_bold[red]*$c_reset $*"
    echo fatal: $* >> $logFile
    exit 1
}

error() {
    echo " $fg_bold[red]*$c_reset $*"
    echo error: $* >> $logFile
    [[ $+keep_going -eq 1 ]] || exit 1
}

verbose() {
    if [[ $+verbose -eq 1 ]] ; then
        echo " $fg_bold[cyan]*$c_reset $*"
    fi
}

list_uncompiled() {
    error "listing uncompiled packages not supported yet"
}

list_compiled() {
    error "listing compiled packages not supported yet"
}

list_pkgs() {
    error "listing packages not supported yet"
}


pushd_build_dir() {
    local build_dir="$pmoonHome/tmp/$1"
    mkdir -p $build_dir
    pushd $build_dir
}

pacman_output_field() {
    pacman 2>/dev/null ${(s: :)1} | grep "^$2" | sed 's/.*: //'
}

dbPath=$(pacman_output_field -v DB)
typeset -A split_pkgs
typeset -A requested_pkgs
typeset -a install_pkgs
typeset -A makedep_pkgs
typeset -a cyclic_deps
typeset -a resolved_pkgs

is_dep() {
    [[ $+requested_pkgs[$1] -eq 0 ]] && ! pacman &>/dev/null -Qe $1
}

build_pkg() {
    local name=$1

    pushd "$pmoonHome/tmp/$name" || \
        die "could not cd to $pmoonHome/tmp/$name"
    rm -rf src

    typeset -a mkpkg_args
    mkpkg_args=(-f)
    if [[ $+split_pkgs[$name] -eq 1 ]] ; then
        # fullname only set for split packages
        mkpkg_args=($mkpkg_args --pkg "$split_pkgs[$name]")
    fi

    if is_dep $pkg ; then
        local as_dep
    fi

    log_info "build ${as_dep+dependency }package $name ($mkpkg_args)"

    rm -f *.pkg.tar.*
    if [[ $+quiet -eq 1 ]] ; then
        makepkg &>/dev/null $mkpkg_args
    else
        makepkg $mkpkg_args
    fi

    [[ $? -eq 0 ]] || die "could not build $name"

    # TODO: test split packages one by one
    as_root pacman --noconfirm -U ${as_dep+--asdeps} *.pkg.tar.* || \
        die "could not install package"

    # record the date the package was dep_status
    package-query -Qif %1 $name > "$pmoonHome/pkg/$name"
    [[ $+keep_temp = 0 ]] && rm -rf "$pmoonHome/tmp/$name"
    popd
}

# printers (<install date> <sync repo> <name> <version>)
resolve_name() {
    local name=$1
    local name_v=$2

    local pq_fmt="%1 %s %n %v"
    typeset -a pkgData
    pkgData=( $(package-query -Qf $pq_fmt --query-type provides $name_v || \
                package-query -Qif $pq_fmt $name_v || \
                package-query -Sif $pq_fmt $name_v) )

    if [[ -z $pkgData ]] ; then
        pkgData=( $(package-query -Sf $pq_fmt --query-type provides $name) )

        if [[ $#pkgData -ne 4 ]] ; then
            if [[ $#pkgData -lt 4 ]] ; then
                # TODO: check aur
                error "could not find package $name_v"
            else
                error "multiple packages provide $name_v"
                for ignore repo pr_name ver in "${(@)pkgData}" ; do
                    error "    $pr_name-$ver in $repo"
                done
                error "please install one of these and run this script again"
            fi
            return 1
        fi
    fi

    # check if package conflicts with anything already installed
    local conflict
    conflict=( $(package-query -Qf $pq_fmt --query-type conflicts "$pkgData[3]=$pkgData[4]") )
    if [[ -n $conflict ]] ; then
        echo "$conflict"
    else
        echo "$pkgData"
    fi
}


collect_pkg_data() {
    local name=$1
    local repo=$2

    if [[ $repo = local ]] ; then
        warn "unsupported: AUR package $name"
    else
        verbose "adding package $name from $repo to install list"

        local basename=$(grep -A1 '%BASE%' \
               ${dbPath}/sync/$repo/$name-[0-9]*/desc | tail -n 1)

        if [[ -n $basename && $basename != $name ]] ; then
            if [[ $+split_pkgs[$basename] -eq 1 ]] ; then
                split_pkgs[$basename]+=" $name"
                return
            fi

            split_pkgs[$basename]=$name

            # already got here through another package in split
            if [[ $+dep_status[$basename] -eq 1 ]] ; then
                split_pkgs[$basename]+=" $basename"
                return
            fi
        else
            local basename=$name

            # already got here through split package
            if [[ $+split_pkgs[$basename] -eq 1 ]] ; then
                split_pkgs[$basename]+=" $name"
            fi
        fi

        pushd_build_dir $basename

        local arch=$(package-query -Sif %a $repo/$basename)
        local use_abs=0
        if [[ $+no_abs -eq 0 ]] ; then
            cp -r $ABS_DIR/$repo/$basename/* . && use_abs=1
        fi

        if [[ $use_abs -eq 0 ]] ; then
            rsync &>/dev/null $RSYNC_ARGS "$ABS_RSYNC/$arch/$repo/$basename/" .
            [[ $? -ne 0 ]] && \
                die "rsync connection died, could not retrieve $basename"
        fi

        typeset -a mk_deps
        mk_deps=( $(bash -c 'source /etc/makepkg.conf; source PKGBUILD && echo ${makedepends[@]}') )

        if [[ $#mk_deps > 0 ]] ; then
            verbose "begin dependencies of $name"
            if [[ $+make_deps -eq 1 ]] ; then
                for dep in $mk_deps ; do
                    collect_pkg $dep
                done
            else
                typeset -a pkgData
                for dep in $mk_deps ; do
                    pkgData=( $(resolve_name $dep $dep) )
                    if [[ $? -eq 0 ]] && ! pacman &>/dev/null -Q $pkgData[3] ; then
                        makedep_pkgs[$pkgData[3]]=$pkgData[4]
                    fi
                done
            fi
            verbose "end dependencies of $name"
        fi

        # TODO: store previous version here also
        install_pkgs+=($basename $pkgData[4])
        popd
    fi
}

as_root() {
    if [[ $UID -eq 0 ]] ; then $* ; else sudo $* ; fi
}

processing_pkg() {
    if [[ $+dep_status[$1] -eq 1 ]] ; then
        if [[ $dep_status[$1] -eq 2 ]] ; then
            pacman &>/dev/null -Q $1 || cyclic_deps+=$1
            dep_status[$1]=1
        fi
        return 1
    fi

    dep_status[$1]=1
    return 0
}

collect_pkg() {
    local name_v=$1
    local name=$(echo $name_v | sed 's/[<>=].*$//')

    # don't check the same package twice
    processing_pkg $name || return 0

    typeset -a pkgData
    pkgData=( $(resolve_name $name $name_v) )
    [[ $? -ne 0 ]] && return

    if [[ $name != $pkgData[3] ]] ; then
        name=$pkgData[3]
        [[ $+dep_status[$name] -eq 0 ]] || return
        dep_status[$name]=1
    fi

    if [[ $pkgData[1] = - ]] ; then
        verbose "new package $name"
    elif [ -f $pmoonHome/pkg/$name ] ; then
        if [[ $pkgData[1] -le $(cat $pmoonHome/pkg/$name) ]] ; then
            resolved_pkgs+=($name $pkgData[4])
            verbose "package $name up to date and compiled"
            return
        else
            verbose "package $name was replaced by binary"
        fi
    else
        verbose "package $name installed but never compiled"
    fi

    dep_status[$name]=2
    collect_pkg_data $name $pkgData[2]
    dep_status[$name]=1
}

build_pkgs() {
    if [[ $#install_pkgs -eq 0 ]] ; then
        log_info "nothing to install"
        return 0
    fi

    if [[ $+ask -eq 1 ]] ; then
        echo -n "Continue installing [yN]? "
        read ans
        if [[ $ans != Y && $ans != y ]] ; then
            exit 1
        fi
    fi

    for pkg in $cyclic_deps ; do
        as_root pacman --asdeps --needed --noconfirm -S $pkg || die \
            "could not get binary package for recursive dependency $pkg"
    done

    for pkg in ${(k)makedep_pkgs} ; do
        as_root pacman --asdeps --needed --noconfirm -S $pkg
    done

    for pkg ver in "${(@)install_pkgs}" ; do
        build_pkg $pkg
    done
}

collect_all() {
    local logPath=$(pacman_output_field -v Log)

    if [[ -f "$pmoonHome/last_update" ]] ; then
        # TODO: use log to get list of candidates to compile
        :
    else
        warn "last update time not found, checking all installed packages"

        for pkg in $(pacman -Qq) ; do
            collect_pkg $pkg
        done
    fi
}

collect_pkgs() {
    if [[ $# = 0 ]] ; then
        collect_all
    else
        for pkg in $* ; do
            requested_pkgs[$pkg]=1
            collect_pkg $pkg
        done
    fi
}

main() {
    jgetopt $0 "$PACMOON_VERSION (please enjoy your evening)" \
        ':[packages]' \
        ask,a          "ask for confirmation before compiling" \
        pretend,p      "only print what would be done" \
        keep-going,k   "do not stop on error" \
        verbose,v      "increase verbosity" \
        quiet,q        "hide output of compilation" \
        keep-build,b   "keep temporary build files" \
        no-abs,A       "do not use local abs mirror (slower)" \
        uncompiled,u   "list packages which have not been custom compiled" \
        make-deps,m    "compile make dependencies rather than using binaries" \
        compiled,c     "list packages which have been custom compiled" \
        list,l         "list installed packages with their compilation status" \
        -- $*

    if [[ $+no_abs = 0 && ! -d $ABS_DIR ]] ; then
        warn "ABS directory is not available, reverting to downloading abs builds one at a time which is slower"
        warn "Please install 'abs' and run it to sync your local abs mirror"
        typeset -g no_abs
        no_abs=1
    fi

    if [[ $+uncompiled -eq 1 ]] ; then
        list_uncompiled
    elif [[ $+compiled -eq 1 ]] ; then
        list_compiled
    elif [[ $+list -eq 1 ]] ; then
        list_pkgs
    else
        info "please wait, collecting packages to build"
        collect_pkgs $positionals

        if [[ $#resolved_pkgs > 0 ]] ; then
            echo -e "\nskipping already compiled packages:"
            for pkg ver in $resolved_pkgs ; do
                print_pkg $pkg $ver
            done
        fi

        if [[ $#cyclic_deps > 0 ]] ; then
            echo -e "\nbinaries installed due to cyclic dependencies:"
            for pkg in $cyclic_deps ; do
                info $pkg
            done
        fi

        if [[ $#makedep_pkgs > 0 ]] ; then
            echo -e "\nbinaries installed due to make dependencies:"
            for pkg in ${(k)makedep_pkgs} ; do
                print_pkg $pkg $makedep_pkgs[$pkg]
            done
        fi

        echo -e "\npacmoon install list:"
        local sfx
        for pkg ver in $install_pkgs ; do
            print_inst_pkg $pkg $ver
        done

        [[ $+pretend -eq 0 ]] && build_pkgs
    fi
}

main $*
